{"version":3,"sources":["images/demo.png","pages/Home/index.tsx","services.ts","config.ts","components/DownloadModal/index.tsx","components/CustomLayout/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","initialData","BASE_URL","publishImage","params","cb","err","path","headers","axios","post","then","response","status","data","catch","error","message","warning","apiPost","DownloadModal","props","useState","loading","setLoading","visible","setVisible","fetchUrl","setFetchUrl","useEffect","console","log","handleOk","url","method","responseType","apiDownload","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","Math","round","Date","body","appendChild","click","success","warn","handleCancel","centered","width","style","height","title","onOk","onCancel","footer","key","onClick","type","margin","cover","alt","src","Home","tmpSrc","fileSrc","setFileSrc","croppedImage","setCroppedImage","rotate","setRotate","zoom","setZoom","cropper","setCropper","downloadImageUrl","setDownloadImageUrl","x","y","scaleX","scaleY","cropperProps","initialAspectRatio","rotatable","zoomTo","updateZoom","val","zm","updateRotate","rt","rotateTo","hoverable","demoImage","beforeUpload","file","reader","FileReader","readAsDataURL","onload","result","UploadOutlined","span","dragMode","onInitialized","instance","setData","className","icon","RotateLeftOutlined","RotateRightOutlined","ZoomInOutlined","ZoomOutOutlined","ClearOutlined","reset","getCroppedCanvas","toDataURL","resp","previewUrl","background","Header","Content","Footer","CustomLayout","Sider","SubMenu","Props","bottom","headerTitle","fontSize","padding","exact","component","offsetBottom","textAlign","App","basename","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,kC,0KCuBvCC,E,0WClBIC,ECLS,wBDqFJC,EAAe,SAACC,EAAaC,EAAWC,IArCrC,SAAC,GAA0G,IAAxGC,EAAuG,EAAvGA,KAAMH,EAAiG,EAAjGA,OAAiBC,GAAgF,EAAzFG,QAAyF,EAAhFH,IAAIC,EAA4E,EAA5EA,IAC7CG,IACQC,KADR,UACgBR,GADhB,OAC2BK,GAAQH,GAC3BO,MAAK,SAASC,GACc,MAApBA,EAASC,QAAsC,MAApBD,EAASC,SAAmBR,EAGxDC,EAAIM,GAFJP,EAAGO,EAASE,SAKnBC,OAAM,SAASC,GACS,MAAjBA,EAAMH,QAAmC,MAAjBG,EAAMH,OAM9BG,GAA0B,MAAjBA,EAAMH,OACfI,EAAA,EAAQC,QAAQ,iDAGpBD,EAAA,EAAQC,QAAQ,0BATRZ,GACAA,EAAIU,EAAMC,YAyB7BE,CAAQ,CACPZ,KAAM,uBACNH,SACAC,KACAC,SEhBac,EAlE0C,SAACC,GAAW,IAAD,EAClCC,oBAAS,GADyB,mBACzDC,EADyD,KAChDC,EADgD,OAElCF,oBAAS,GAFyB,mBAEzDG,EAFyD,KAEhDC,EAFgD,OAGhCJ,mBAAS,IAHuB,mBAGzDK,EAHyD,KAG/CC,EAH+C,KAMhEC,qBAAU,WACe,IAAlBR,EAAMM,WACLG,QAAQC,IAAIV,EAAMM,UACpBC,EAAYP,EAAMM,UAClBD,GAAW,MAEf,CAACL,IAEL,IAAMW,EAAW,WACfR,GAAW,GFhBY,SAACS,EAAa5B,EAAUC,GAClDG,IAAM,CACCwB,IAAI,GAAD,OAAKA,GACRC,OAAQ,MACRC,aAAc,SACfxB,MAAK,SAACC,GACLP,EAAGO,MACJG,OAAM,SAACC,GACNV,EAAIU,MESRoB,CAAYT,GAAU,SAACf,GACnB,IAAMqB,EAAMI,OAAOC,IAAIC,gBAAgB,IAAIC,KAAK,CAAC5B,EAASE,QACpD2B,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAOX,EACZQ,EAAKI,aAAa,WAAlB,gBAAuCC,KAAKC,OAAO,IAAIC,KAAO,KAA9D,SACAN,SAASO,KAAKC,YAAYT,GAC1BA,EAAKU,QACLlC,EAAA,EAAQmC,QAAQ,cAChB5B,GAAW,GACXE,GAAW,MACZ,WACCT,EAAA,EAAQoC,KAAK,qBACb7B,GAAW,GACXE,GAAW,OAIX4B,EAAe,WACnB1B,EAAY,IACZF,GAAW,GACXL,EAAMiC,gBAGN,OACE,oCACE,uBACEC,UAAU,EACVC,MAAO,MACPC,MAAO,CAACC,OAAQ,OAChBjC,QAASA,EACTkC,MAAM,gBACNC,KAAM5B,EACN6B,SAAUP,EACVQ,OAAQ,CACN,uBAAQC,IAAI,SAASC,QAASV,GAA9B,UAGA,uBAAQS,IAAI,WAAWE,KAAK,UAAU1C,QAASA,EAASyC,QAAShC,GAAjE,cAKF,uBACEyB,MAAO,CAAED,MAAO,MAAOE,OAAQ,MAAOQ,OAAQ,QAC9CC,MAAO,yBAAKC,IAAI,gBAAgBC,IAAK1C,EAAU8B,MAAO,CAACC,OAAQ,iC,kBHxC3E,IAiMeY,EAjMF,WAAO,IAAD,EACShD,mBAASrB,GADlB,gCAEeqB,wBAN9BiD,IAIe,mBAERC,EAFQ,KAECC,EAFD,OAGyBnD,mBAL9B,mCAEK,mBAGRoD,EAHQ,KAGMC,EAHN,OAIarD,mBAAS,GAJtB,mBAIRsD,EAJQ,KAIAC,EAJA,OAKSvD,mBAAS,IALlB,mBAKRwD,EALQ,KAKFC,EALE,OAMezD,qBANf,mBAMR0D,EANQ,KAMCC,EAND,OAOiC3D,mBAAS,IAP1C,mBAOR4D,EAPQ,KAOUC,EAPV,KASflF,EAAc,CACVmF,EAAG,IACHC,EAAG,IACH7B,MAAO,IACPE,OAAQ,IACRkB,OAAQ,EACRU,OAAQ,EACRC,OAAQ,GAGZ,IAeMC,EAAe,CACjBnB,IAAKG,EAELiB,mBAAoB,EACpBC,WAAW,EACXC,OAAQb,GAcNc,EAAa,SAACC,GAChB,IAAIC,EAEJf,EADAe,EAAKhB,EAAOe,GAGW,qBAAZb,GACPA,EAAQW,OAAOG,IAIjBC,EAAe,SAACF,GAClB,IAAIG,EAEJnB,EADAmB,EAAKpB,EAASiB,GAGS,qBAAZb,GACPA,EAAQiB,SAASD,IAkCzB,OACI,8BAESxB,GACG,oCACI,uBACI0B,WAAS,EACTzC,MAAO,CAAED,MAAM,IAAKE,OAAQ,IAAKQ,OAAQ,QACzCC,MAAO,yBAAKC,IAAI,UAAUC,IAAK8B,IAAW1C,MAAO,CAACC,OAAQ,8BAG9D,uBAAQ0C,aAxEP,SAACC,GAClB,IAAMC,EAAS,IAAIC,WAOnB,OANAD,EAAOE,cAAcH,GACrBC,EAAOG,OAAS,WACZ,IAAIpC,EAAMiC,EAAOI,OACjBjC,EAAWJ,KAGR,IAiEa,2BACI,kBAACsC,EAAA,EAAD,MADJ,sBAUZnC,GACI,2BACI,uBAAKoC,KAAM,IACP,uBAAMnD,MAAO,CAACC,OAAQ,QAClB,kBAAC,IAAD,iBACQ8B,EADR,CAEIqB,SAAU,OACVC,cAAe,SAACC,GACZ9B,EAAW8B,GACXhC,EAAQ,IACRgC,EAASC,QAAQ/G,OAGzB,yBAAKgH,UAAU,WACX,uBAAStD,MAAM,eACX,uBAAQuD,KAAM,kBAACC,EAAA,EAAD,MAAuBnD,QAAS,WAC1C+B,GAAc,QAGtB,uBAASpC,MAAM,gBACX,uBAAQuD,KAAM,kBAACE,EAAA,EAAD,MAAwBpD,QAAS,WAC3C+B,EAAa,QAGrB,uBAASpC,MAAM,UACX,uBAAQuD,KAAM,kBAACG,EAAA,EAAD,MAAmBrD,QAAS,WACtC4B,EAAW,QAGnB,uBAASjC,MAAM,WACX,uBAAQuD,KAAM,kBAACI,EAAA,EAAD,MAAoBtD,QAAS,WACvC4B,GAAY,QAGpB,uBAASjC,MAAM,SACX,uBAAQuD,KAAM,kBAACK,EAAA,EAAD,MAAkBvD,QAAS,WApIlD,qBAAZgB,IACPA,EAAQwC,QACRzC,EAAQ,SAsIgB,uBAAQf,QAAS,WACbS,EAAW,IACXE,EAAgB,MAFpB,oBAIA,uBAAQX,QAAS,WAnJtB,qBAAZgB,GACPL,EAAgBK,EAAQyC,mBAAmBC,eAkJnB,WACA,uBAAQ1D,QAAS,WA3KvC,oCA4EHU,EACCzD,EAAA,EAAQD,MAAM,8CAGdC,EAAA,EAAQM,QAAQ,mDAAmD,WAC/DpB,EAAa,CACTkG,KAAM3B,IACP,SAACiD,GACAxC,EAAoBwC,EAAKC,eAC1B,WACC3G,EAAA,EAAQD,MAAM,iCAqFE,cAMZ,uBAAK4F,KAAM,IACP,uBACIV,WAAS,EACTzC,MAAO,CAAES,OAAQ,OAAQ2D,WAAY,cAAenE,OAAQ,OAAQF,MAAO,OAC3EW,MAAO,yBAAKC,IAAI,UAAUC,IAAKK,EAAcjB,MAAO,CAAKS,OAAQ,OAAOV,MAAO,aAOnG,kBAAC,EAAD,CAAe7B,SAAUuD,EAAkB5B,aAAc,WACrD6B,EAAoB,SI/M5B2C,E,IAAAA,OAAQC,E,IAAAA,QAASC,E,IAAAA,OA0CVC,G,IA1CkBC,M,IACzBC,QAMa,SAACC,GAAwB,IAAD,EACb9G,mBAAS,IADI,mBAClC+G,EADkC,aAEH/G,mBAAS,kBAFN,mBAElCgH,EAFkC,aAGPhH,oBAAS,IAHF,6BASzC,OACI,2BACI,2BACI,kBAACwG,EAAD,CAAQrE,MAAO,CAAEoE,WAAY,OAAQU,SAAU,WAC1CD,GAEL,yBAAK7E,MAAO,CAAEoE,WAAY,UAAWW,QAAS,SAC1C,kBAACT,EAAD,CAAStE,MAAO,CAAES,OAAQ,WACtB,6BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOuE,OAAK,EAAClI,KAAK,IAAImI,UAAWpE,QAKjD,uBAAOqE,aAAcN,GACjB,kBAACL,EAAD,CAAQvE,MAAO,CAAEmF,UAAW,WAA5B,6BCtBLC,MAZf,WACE,OAEI,kBAAC,IAAD,CAAeC,SAAU,KACvB,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAQvI,KAAK,IAAImI,UAAWT,OCAlBc,QACW,cAA7B1G,OAAO2G,SAASC,UAEe,UAA7B5G,OAAO2G,SAASC,UAEhB5G,OAAO2G,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3G,SAAS4G,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9I,MAAK,SAAA+I,GACJA,EAAaC,gBAEd5I,OAAM,SAAAC,GACLc,QAAQd,MAAMA,EAAMC,c","file":"static/js/main.c8339480.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/demo.44dc6069.png\";","import PropTypes from \"prop-types\";\nimport  \"./styles.scss\";\nimport React, { Component, useState, useEffect, useRef } from \"react\";\nimport { Timeline, Skeleton, Card, Affix, Upload, Button, message, Row, Col, Tooltip } from \"antd\";\nimport { UploadOutlined, RotateLeftOutlined, RotateRightOutlined, ZoomInOutlined, ZoomOutOutlined , ClearOutlined } from '@ant-design/icons';\nimport Cropper from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\nimport DownloadModal from '../../components/DownloadModal';\nimport demoImage from '../../images/demo.png';\nimport src from \"*.bmp\";\nimport {publishImage} from '../../services'\nimport Meta from \"antd/lib/card/Meta\";\n\nconst limit = 10;\nconst start = 0;\n\ninterface Props {\n}\n\ntype HomeProps = {\n    loading: boolean\n}\n\nlet initialData: Cropper.Data;\nlet tmpSrc: any;\nlet placeholder: any;\nplaceholder = 'https://via.placeholder.com/500';\n  \nconst Home = () => {\n    const [data, setData] = useState(initialData);\n    const [fileSrc, setFileSrc] = useState(tmpSrc);\n    const [croppedImage, setCroppedImage] = useState(placeholder);\n    const [rotate, setRotate] = useState(0);\n    const [zoom, setZoom] = useState(0.2);\n    const [cropper, setCropper] = useState<Cropper>();\n    const [downloadImageUrl, setDownloadImageUrl] = useState('');\n\n    initialData = {\n        x: 200,\n        y: 200,\n        width: 500,\n        height: 600,\n        rotate: 0,\n        scaleX: 1,\n        scaleY: 1,\n    }\n\n    const getCropData = () => {\n        \n        if (typeof cropper !== 'undefined') {\n            setCroppedImage(cropper.getCroppedCanvas().toDataURL());\n        }\n    };\n\n    const onReset = () => {\n        \n        if (typeof cropper !== 'undefined') {\n            cropper.reset();\n            setZoom(0.2);\n        }\n    }\n    \n    const cropperProps = { // make sure all required component's inputs/Props keys&types match\n        src: fileSrc,\n        // style,\n        initialAspectRatio: 4/4,\n        rotatable: true,\n        zoomTo: zoom,\n    };\n\n    const beforeUpload = (file: File) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => {\n            let src = reader.result;\n            setFileSrc(src)\n            \n        };\n        return false;\n    }\n\n    const updateZoom = (val: number) => {\n        let zm = zoom;\n        zm = zoom + val;\n        setZoom(zm);\n        \n        if (typeof cropper !== 'undefined') {\n            cropper.zoomTo(zm);\n        }\n    }\n\n    const updateRotate = (val: number) => {\n        let rt = rotate;\n        rt = rotate + val;\n        setRotate(rt);\n        \n        if (typeof cropper !== 'undefined') {\n            cropper.rotateTo(rt);\n        }\n    }\n\n    const publish = () => {\n        if(croppedImage === placeholder) {\n            message.error(\"Please generate preview before publishing.\")\n        } else {\n            // console.log(croppedImage);\n            message.loading(\"please wait while the image is being processed.\", () => {\n                publishImage({\n                    file: croppedImage\n                }, (resp: any) => {\n                    setDownloadImageUrl(resp.previewUrl)\n                }, () => {\n                    message.error('Error uploading image')\n                })\n            })\n            \n        }\n    }\n\n    const handleUpdate = () => {\n        setData({\n            x: 100,\n            y: 100,\n            width: 500,\n            height: 600,\n            rotate: rotate,\n            scaleX: 1,\n            scaleY: 1,\n        });\n    }\n\n    return (\n        <div>\n            {\n                !fileSrc && (\n                    <>\n                        <Card\n                            hoverable\n                            style={{ width:600, height: 600, margin: 'auto' }}\n                            cover={<img alt=\"example\" src={demoImage} style={{height: '-webkit-fill-available'}}/>}\n                        >\n                        </Card>\n                        <Upload beforeUpload={beforeUpload}>\n                            <Button>\n                                <UploadOutlined /> Click to Upload\n                            </Button>\n                        </Upload>\n                    </>\n                    \n                )\n            }\n            \n            {   \n                fileSrc && (\n                    <Row>\n                        <Col span={12}>\n                            <Card style={{height: '50%'}}>\n                                <Cropper\n                                    {...cropperProps}\n                                    dragMode={\"move\"}\n                                    onInitialized={(instance) => {\n                                        setCropper(instance);\n                                        setZoom(0.2);\n                                        instance.setData(initialData);\n                                    }}\n                                />\n                                <div className=\"actions\">\n                                    <Tooltip title=\"Rotate Left\">\n                                        <Button icon={<RotateLeftOutlined/>} onClick={() => {\n                                            updateRotate(-90);\n                                        }}/>\n                                    </Tooltip>\n                                    <Tooltip title=\"Rotate Right\">\n                                        <Button icon={<RotateRightOutlined/>} onClick={() => {\n                                            updateRotate(90);\n                                        }}/>\n                                    </Tooltip>\n                                    <Tooltip title=\"ZoomIn\">\n                                        <Button icon={<ZoomInOutlined/>} onClick={() => {\n                                            updateZoom(0.1)\n                                        }}/>\n                                    </Tooltip>\n                                    <Tooltip title=\"ZoomOut\">\n                                        <Button icon={<ZoomOutOutlined/>} onClick={() => {\n                                            updateZoom(-0.1)\n                                        }}/>\n                                    </Tooltip>\n                                    <Tooltip title=\"Reset\">\n                                        <Button icon={<ClearOutlined/>} onClick={() => {\n                                            onReset();\n                                        }}/>\n                                    </Tooltip>\n                                    <Button onClick={() => {\n                                        setFileSrc('');\n                                        setCroppedImage('');\n                                    }}>Upload new image</Button>\n                                    <Button onClick={() => getCropData()}>Preview</Button>\n                                    <Button onClick={() => publish()}>Publish</Button>\n                                </div>\n                            </Card>\n                            \n                        </Col>\n\n                        <Col span={12}>\n                            <Card\n                                hoverable\n                                style={{ margin: '10px', background: 'transparent', height: 'auto', width: '90%'  }}\n                                cover={<img alt=\"example\" src={croppedImage} style={{    margin: 'auto',width: '90%'}}/>}\n                            >\n                            </Card>\n                        </Col>\n                    </Row>\n                )\n            }\n            <DownloadModal fetchUrl={downloadImageUrl} handleCancel={() => {\n                setDownloadImageUrl('');\n            }}/>\n        </div>\n    );\n}\n\nexport default Home;\n","// import React from 'react';\nimport { message } from 'antd';\nimport axios from 'axios';\nimport config from './config';\n\nconst { BASE_URL } = config;\n\nexport const apiDownload = (url: string, cb?: any, err?: any) => {\n\taxios({\n        url: `${url}`,\n        method: 'GET',\n        responseType: 'blob', // important\n    }).then((response) => {\n        cb(response);\n    }).catch((error) => {\n        err(error);\n    });\n}\n\nconst apiGet = ({ path, params, headers, cb, err } : { path: string, params: any, headers?: any, cb: any, err: any }) => {\n\taxios\n        .get(`${BASE_URL}${path}`, { params })\n        .then((response : any) => {\n            if (response.status === 200 && cb) {\n                cb(response.data);\n            } else {\n                if (err) {\n                    err(response.error);\n                }\n            }\n        })\n        .catch(function(error) {\n            if (\n                (error &&  (error.status === 404 || error.status === 400))\n            ) {\n                if (err) {\n                    err(error.message);\n                }\n                message.error('Connection Error!');\n                return;\n            }\n            if (error && error.status === 401) {\n                message.warning('Unauthorised request! You will be logged out.');\n            }\n            message.warning('Something went wrong!!');\n        });\n};\n\nconst apiPost = ({ path, params, headers, cb, err } : { path: string, params: any, headers?: any, cb: any, err: any }) => {\n\taxios\n        .post(`${BASE_URL}${path}`, params)\n        .then(function(response) {\n            if ((response.status === 200 || response.status === 201) && cb) {\n                cb(response.data);\n            } else {\n                err(response);\n            }\n        })\n        .catch(function(error) {\n            if (error.status === 404 || error.status === 400) {\n                if (err) {\n                    err(error.message);\n                }\n                return;\n            }\n            if (error && error.status === 401) {\n                message.warning('Unauthorised request! You will be logged out.');\n                return;\n            }\n            message.warning('Something went wrong!!');\n        });\n};\n\n\n// Posts\n\nexport const preview = (params: string, cb: any, err: any) => {\n\tapiGet({\n\t\tpath: '/preview/' + params,\n\t\tparams,\n\t\tcb,\n        err\n\t});\n};\n\nexport const publishImage = (params: any, cb?: any , err?: any) => {\n\tapiPost({\n\t\tpath: '/api/general/publish',\n\t\tparams,\n\t\tcb,\n\t\terr,\n\t});\n};\n","const BASE_URL = 'http://localhost:1337';\nconst FRONTEND_URL = 'http://localhost:3000'\n\nexport default {\n\tBASE_URL,\n\tFRONTEND_URL,\n};\n","import React, { Component, useState, FunctionComponent, useEffect } from 'react';\nimport { Modal, Button, Card, message } from 'antd';\nimport {apiDownload} from '../../services'\ntype DownloadProps = {\n    fetchUrl: string,\n    handleCancel: () => void\n}\n\nconst DownloadModal : FunctionComponent<DownloadProps> = (props) => {\n    const [loading, setLoading] = useState(false);\n    const [visible, setVisible] = useState(false);\n    const [fetchUrl, setFetchUrl] = useState('');\n    \n\n    useEffect(() => {\n        if(props.fetchUrl != '') {\n            console.log(props.fetchUrl);\n          setFetchUrl(props.fetchUrl);\n          setVisible(true);\n        }\n    },[props])\n\n  const handleOk = () => {\n    setLoading(true);\n    apiDownload(fetchUrl, (response: any) => {\n        const url = window.URL.createObjectURL(new Blob([response.data]));\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', `image_${Math.round(+new Date()/1000)}.png`);\n        document.body.appendChild(link);\n        link.click();\n        message.success(\"Downloaded\");\n        setLoading(false);\n        setVisible(false);\n    }, () => {\n        message.warn(\"Error downloading\");\n        setLoading(false);\n        setVisible(false);\n    })\n  };\n\n  const handleCancel = () => {\n    setFetchUrl('');\n    setVisible(false);\n    props.handleCancel();\n  };\n\n    return (\n      <>\n        <Modal\n          centered={true}\n          width={'90%'}\n          style={{height: '60%'}}\n          visible={visible}\n          title=\"Preview Image\"\n          onOk={handleOk}\n          onCancel={handleCancel}\n          footer={[\n            <Button key=\"cancel\" onClick={handleCancel}>\n              Cancel\n            </Button>,\n            <Button key=\"download\" type=\"primary\" loading={loading} onClick={handleOk}>\n              Download\n            </Button>,\n          ]}\n        >\n          <Card\n            style={{ width: '95%', height: '50%', margin: 'auto' }}\n            cover={<img alt=\"Image Preview\" src={fetchUrl} style={{height: '-webkit-fill-available'}}/>}\n          />\n        </Modal>\n      </>\n    );\n}\nexport default DownloadModal;","import React, { Component, useState }  from 'react';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport './styles.scss';\nimport { Layout, Menu, Card, message, Affix } from 'antd';\n\nimport Home from '../../pages/Home';\n// import Home from '../../pages/Demo';\n\nconst { Header, Content, Footer, Sider } = Layout;\nconst { SubMenu } = Menu;\ntype LayoutProps = {\n    collapsed: boolean,\n    headerTitle: string,\n}\n\nconst CustomLayout = (Props: LayoutProps) => {\n    const [bottom, setBottom] = useState(10);\n    const [headerTitle, setHeaderTitle] = useState('Framing Store');\n    const [collapsed, setCollapsed] = useState(false);\n\n    const onCollapse = (collapsed: boolean) => {\n        setCollapsed(collapsed);\n    };\n\n    return (\n        <Layout>\n            <Layout>\n                <Header style={{ background: '#fff', fontSize: 'larger' }}>\n                    {headerTitle}\n                </Header>\n                <div style={{ background: '#ECECEC', padding: '30px' }}>\n                    <Content style={{ margin: '0 16px' }}>\n                        <div>\n                            <Switch>\n                                <Route exact path='/' component={Home} />\n                            </Switch>\n                        </div>\n                    </Content>\n                </div>\n                <Affix offsetBottom={bottom}>\n                    <Footer style={{ textAlign: 'center' }}>\n                        Developed By Shubham\n                    </Footer>\n                </Affix>\n                \n            </Layout>\n        </Layout>\n    );\n}\n\nexport default CustomLayout;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport logo from './logo.svg';\nimport './App.scss';\nimport CustomLayout from \"./components/CustomLayout\";\n\nfunction App() {\n  return (\n\n      <BrowserRouter basename={\"/\"}>\n        <Switch>\n          {/*<Route path=\"/login\" component={Login} />*/}\n          <Route  path=\"/\" component={CustomLayout} />\n        </Switch>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}